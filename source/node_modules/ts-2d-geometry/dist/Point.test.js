"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point_1 = require("./Point");
var Vector_1 = require("./Vector");
var Line_1 = require("./Line");
var p = new Point_1.Point(1, 2);
beforeEach(function () {
    p = new Point_1.Point(1, 2);
});
test('constructor should create point', function () {
    expect(p.x).toBe(1);
    expect(p.y).toBe(2);
});
test('minus should create Vector', function () {
    var v1 = p.minus(new Point_1.Point(-1, -1));
    expect(v1.x).toBe(2);
    expect(v1.y).toBe(3);
});
test('plus should create Point', function () {
    var p1 = p.plus(new Vector_1.Vector(1, 1));
    expect(p1.x).toBe(2);
    expect(p1.y).toBe(3);
});
test('asLine should throw exception if null vector is given', function () {
    expect(function () {
        Point_1.point(0, 0).asLine(Vector_1.Vector.null);
    }).toThrow();
});
test('asLine define line from vector', function () {
    expect(Point_1.point(0, 0).asLine(Vector_1.vector(1, 0))).toEqual(Line_1.line(0, 0, 1, 0));
});
test('rotate should create a new point thats rotated', function () {
    var rotated = Point_1.point(1, 0).rotate(Point_1.point(0, 0), 90);
    expect(rotated.x).toBeCloseTo(0, 2);
    expect(rotated.y).toBeCloseTo(-1, 2);
});
test('translate should create new Point', function () {
    var p1 = p.translate(3, 2);
    expect(p1.x).toBe(p.x + 3);
    expect(p1.y).toBe(p.y + 2);
});
test('distanceSquare should return the distance between points squared', function () {
    var p1 = Point_1.Point.fromValues(0, 0);
    var p2 = Point_1.Point.fromValues(2, 2);
    expect(p1.distanceSquare(p2)).toBe(8);
    expect(p2.distanceSquare(p1)).toBe(8);
});
test('equals should return true if points are within config.precision in L_inf norm from each other.', function () {
    expect(Point_1.point(0, 0).equals(Point_1.point(0, 0))).toBeTruthy();
    expect(Point_1.point(0, 0).equals(Point_1.point(1e-4, 0))).toBeTruthy();
    expect(Point_1.point(0, 0).equals(Point_1.point(0, -1e-4))).toBeTruthy();
});
test('equals should return false if points not same', function () {
    expect(Point_1.point(0, 0).equals(Point_1.point(1, 0))).toBeFalsy();
    expect(Point_1.point(0, 0).equals(Point_1.point(-4, 0))).toBeFalsy();
    expect(Point_1.point(0, 0).equals(Point_1.point(0, -4))).toBeFalsy();
});
//# sourceMappingURL=Point.test.js.map