"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point_1 = require("./Point");
var Rectangle_1 = require("./Rectangle");
var Vector_1 = require("./Vector");
test('constructor should initialize rectangle', function () {
    expect(true).toBeTruthy();
    var p1 = Point_1.point(1, 2);
    var p2 = Point_1.point(3, 4);
    var rect = Rectangle_1.rectangle(p1.x, p1.y, p2.x, p2.y);
    expect(rect.topLeft).toEqual(p1);
    expect(rect.bottomRight).toEqual(p2);
});
test('constructor should throw error if first arg isnt top left in x', function () {
    expect(function () {
        var rect = Rectangle_1.rectangle(3, 1, 1, 2);
    }).toThrow();
});
test('constructor should throw error if first arg isnt top left in y', function () {
    expect(true).toBeTruthy();
    expect(function () {
        var rect = Rectangle_1.rectangle(1, 2, 3, 1);
    }).toThrow();
});
test('separationVector should return null vector if there is no overlap', function () {
    expect(Rectangle_1.rectangle(0, 0, 1, 1).separationVector(Rectangle_1.rectangle(1, 1, 2, 2), Vector_1.vector(1, 0)))
        .toBe(Vector_1.Vector.null);
});
[
    { direction: Vector_1.vector(1, 0), expected: Vector_1.vector(2, 0) },
    { direction: Vector_1.vector(-1, 0), expected: Vector_1.vector(-2, 0) },
    { direction: Vector_1.vector(0, 1), expected: Vector_1.vector(0, 2) },
    { direction: Vector_1.vector(0, -1), expected: Vector_1.vector(0, -2) },
    { direction: Vector_1.vector(2, 1), expected: Vector_1.vector(2, 1) },
].forEach(function (_a) {
    var direction = _a.direction, expected = _a.expected;
    test("separteFrom should be " + expect + " when separateing in direction " + direction, function () {
        expect(Rectangle_1.rectangle(0, 0, 3, 3).separationVector(Rectangle_1.rectangle(1, 1, 2, 2), direction))
            .toEqual(expected);
    });
});
[
    { r1: Rectangle_1.rectangle(0, 0, 1, 1), r2: Rectangle_1.rectangle(-1, -1, 1, 0), overlap: false },
    { r1: Rectangle_1.rectangle(0, 0, 1, 1), r2: Rectangle_1.rectangle(-1, -1, 0, 1), overlap: false },
    { r1: Rectangle_1.rectangle(0, 0, 1, 1), r2: Rectangle_1.rectangle(-1, -1, 1, 1), overlap: true },
].forEach(function (_a) {
    var r1 = _a.r1, r2 = _a.r2, overlap = _a.overlap;
    test("overlap should be " + overlap + " when comparing " + r1 + ", " + r2, function () {
        expect(r1.overlap(r2)).toEqual(overlap);
        expect(r2.overlap(r1)).toEqual(overlap);
    });
});
//# sourceMappingURL=Rectangle.test.js.map