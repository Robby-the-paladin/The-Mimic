"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Matrix2x2 = void 0;
var ts_optional_1 = require("@ruffy/ts-optional");
/**
 * Represents a 2x2 matrix.
 */
var Matrix2x2 = /** @class */ (function () {
    function Matrix2x2(elements) {
        this.elements = elements;
    }
    /**
     * Returns a rotation matrix with the given degrees. that rotates
     * Vectors clockwise.
     */
    Matrix2x2.rotationDegrees = function (degrees) {
        var radians = degrees * Math.PI / 180.0;
        var negativeRadians = -radians; // rotation matrix is counter clockwise.
        var components = [
            Math.cos(negativeRadians),
            -Math.sin(negativeRadians),
            Math.sin(negativeRadians),
            Math.cos(negativeRadians),
        ];
        return Matrix2x2.fromArray(components);
    };
    /**
     * Returns a 2x2 Matrix from an array. The element
     * in the array are given in the following places:
     * [(0,0), (1,0), (0,1), (1,1)]
     */
    Matrix2x2.fromArray = function (a) {
        return new Matrix2x2([[a[0], a[1]], [a[2], a[3]]]);
    };
    /**
     * Returns the element in the given position.
     * @param y
     * The y of the element.
     * @param x
     * The x of the element
     */
    Matrix2x2.prototype.get = function (y, x) {
        return this.elements[y][x];
    };
    /**
     * Multiplies this matrix with a vector.
     * @param v
     */
    Matrix2x2.prototype.times = function (v) {
        return [this.get(0, 0) * v[0] + this.get(0, 1) * v[1],
            this.get(1, 0) * v[0] + this.get(1, 1) * v[1]];
    };
    /**
     * Returns an inversed version of this matrix.
     */
    Matrix2x2.prototype.inverse = function () {
        var det = this.det();
        if (det === 0) {
            return ts_optional_1.none;
        }
        var unscaled = new Matrix2x2([[this.get(1, 1), -this.get(1, 0)],
            [-this.get(0, 1), this.get(0, 0)]]);
        return ts_optional_1.some(unscaled.scale(1 / det));
    };
    /**
     * Returns a matrix with the scaled by the given factor.
     * @param factor
     */
    Matrix2x2.prototype.scale = function (factor) {
        return new Matrix2x2(this.elements.map(function (a) { return a.map(function (v) { return v * factor; }); }));
    };
    /**
     * Calculates the determinant of the matrix.
     */
    Matrix2x2.prototype.det = function () {
        return this.elements[0][0] * this.elements[1][1] -
            this.elements[1][0] * this.elements[0][1];
    };
    return Matrix2x2;
}());
exports.Matrix2x2 = Matrix2x2;
//# sourceMappingURL=Matrix2x2.js.map