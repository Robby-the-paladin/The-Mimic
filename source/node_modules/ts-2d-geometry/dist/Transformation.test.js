"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point_1 = require("./Point");
var Transformation_1 = require("./Transformation");
var Polygon_1 = require("./Polygon");
var Vector_1 = require("./Vector");
test('Transformation should move point', function () {
    var p = Point_1.point(2, 0);
    var t = Transformation_1.Transformation.builder()
        .withTranslation(1, 2)
        .build();
    var res = t.applyToPoint(p);
    expect(res).toEqual(Point_1.point(3, 2));
});
test('Transformation should rotate and move point', function () {
    var p = Point_1.point(0, 0);
    var t = Transformation_1.Transformation.builder()
        .withTranslation(2, 0)
        .withRotationDegrees(90)
        .build();
    var res = t.applyToPoint(p);
    expect(res.x).toBeCloseTo(0, 2);
    expect(res.y).toBeCloseTo(-2, 2);
});
test('Transformation should move polygon', function () {
    var pol = Polygon_1.Polygon.fromPoints([
        Point_1.point(0, 0),
        Point_1.point(1, 0),
        Point_1.point(1, 1),
        Point_1.point(0, 1),
    ]);
    var t = Transformation_1.Transformation.builder()
        .withTranslation(2, 0)
        .build();
    var res = t.applyToPolygon(pol);
    expect(res.equals(pol.translate(2, 0))).toBeTruthy();
});
test('Transformation should scale point', function () {
    var p = Point_1.point(1, 1);
    var t = Transformation_1.Transformation.builder()
        .withScale(2, 3)
        .build();
    var res = t.applyToPoint(p);
    expect(res.x).toBeCloseTo(2, 2);
    expect(res.y).toBeCloseTo(3, 2);
});
test('Transformation should rotate point', function () {
    var p = Point_1.point(1, 0);
    var t = Transformation_1.Transformation.builder()
        .withRotationDegrees(90)
        .build();
    var res = t.applyToPoint(p);
    expect(res.x).toBeCloseTo(0, 2);
    expect(res.y).toBeCloseTo(-1, 2);
});
test('Transformation should rotate point according to vector', function () {
    var t = Transformation_1.Transformation.builder()
        .withVectorRotation(Vector_1.vector(0, -2))
        .build();
    expect(t.applyToPoint(Point_1.point(1, 0))).toEqual(Point_1.point(0, -1));
    expect(t.applyToPoint(Point_1.point(0, 1))).toEqual(Point_1.point(1, 0));
    expect(t.applyToPoint(Point_1.point(1, 1))).toEqual(Point_1.point(1, -1));
});
//# sourceMappingURL=Transformation.test.js.map