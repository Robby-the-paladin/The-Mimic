import { Vector } from './Vector';
import { Point } from './Point';
import { Optional } from '@ruffy/ts-optional';
/**
 * A line is represented by a point and a vector, it is of infinite length.
 */
export declare class Line {
    p: Point;
    v: Vector;
    constructor(p: Point, v: Vector);
    /**
     * Finds what point on this line is closest to the input point.
     * @param p2
     * Point that we want to find closest point for.
     */
    project(p2: Point): Point;
    /**
    * Finds the point where two lines intersect returns none if the lines are parallel.
     * @param l2
     * Other line we want to check intersection with.
     */
    intersect(l2: Line): Optional<Point>;
    /**
     * Returns what number you would have to multiply the lines vector with to reach the
     * point returned by project when starting from the line's point.
     * @param p2
     * Point whose projection we get the factor for.
     */
    projectFactor(p2: Point): number;
    /**
     * Gives the minimum distance squared from p2 to the line.
     * This function exists because it doesn't require any Math.sqrt, and is hence a more efficient
     * way if one want to compare distances between many points.
     * @param p2
     * Point to get minimum distance for.
     */
    projectDistanceSquare(p2: Point): number;
    /**
     * Gives the minimum distance from p2 to the line.
     * @param p2
     * Point to get minimum distance for.
     */
    projectDistance(p2: Point): number;
}
/**
 * Creates a line using the first two values as an initial point, and the last two values as
 * the direction vector.
 */
export declare function line(x: number, y: number, vx: number, vy: number): Line;
//# sourceMappingURL=Line.d.ts.map