"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Matrix = void 0;
/**
 * Represents a 2x2 matrix.
 */
var Vector_1 = require("./Vector");
var ts_optional_1 = require("@ruffy/ts-optional");
var Matrix = /** @class */ (function () {
    function Matrix(elements) {
        this.elements = elements;
    }
    Matrix.fromArray = function (a) {
        return new Matrix([[a[0], a[1]], [a[2], a[3]]]);
    };
    Matrix.fromVectors = function (v1, v2) {
        return new Matrix([[v1.x, v1.y], [v2.x, v2.y]]);
    };
    /**
     * Returns the element in the given position.
     * @param y
     * The y of the element.
     * @param x
     * The x of the element
     */
    Matrix.prototype.get = function (y, x) {
        return this.elements[y][x];
    };
    /**
     * Multiplies this matrix with a vector.
     * @param v
     */
    Matrix.prototype.times = function (v) {
        return new Vector_1.Vector(this.get(0, 0) * v.x + this.get(0, 1) * v.y, this.get(1, 0) * v.x + this.get(1, 1) * v.y);
    };
    /**
     * Returns an inversed version of this matrix.
     */
    Matrix.prototype.inverse = function () {
        var det = this.det();
        if (det === 0) {
            return ts_optional_1.none;
        }
        var unscaled = new Matrix([[this.get(1, 1), -this.get(1, 0)],
            [-this.get(0, 1), this.get(0, 0)]]);
        return ts_optional_1.some(unscaled.scale(1 / det));
    };
    /**
     * Returns a matrix with the scaled by the given factor.
     * @param factor
     */
    Matrix.prototype.scale = function (factor) {
        return new Matrix(this.elements.map(function (a) { return a.map(function (v) { return v * factor; }); }));
    };
    /**
     * Calculates the determinant of the matrix.
     */
    Matrix.prototype.det = function () {
        return Vector_1.Vector.fromArray(this.elements[0]).cross(Vector_1.Vector.fromArray(this.elements[1]));
    };
    return Matrix;
}());
exports.Matrix = Matrix;
//# sourceMappingURL=Matrix.js.map