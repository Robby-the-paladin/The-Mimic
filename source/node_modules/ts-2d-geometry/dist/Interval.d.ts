/**
 * Enum that defines how to interpret the interval of a line segment.
 * It can either be Closed, meaning that endpoints are included [p1, p2]
 * OpenStart meaning half open, start is excluded (p1, p2]
 * OpenEnd meaning half open, end is excluded [p1, p2)
 * or Open meaning that start and end are excluded (p1, p2).
 */
export declare enum IntervalType {
    Closed = 1,
    OpenStart = 2,
    OpenEnd = 4,
    Open = 6
}
/**
 * Represents the interval between two number,
 * The interval can be either open, closed, or half closed, ie.
 * either including or excluding the endpoint values
 */
export declare class Interval {
    min: number;
    max: number;
    intervalType: IntervalType;
    private includeMin;
    private includeMax;
    /**
     * Creates a new interval.
     * @param min
     * The minimum endpoint of the interval
     * @param max
     * The maximum endpoint of the interval.
     * @param includeMin
     * If the min value is included in the interval.
     * @param includeMax
     * If the max value is included in the interval.
     */
    constructor(min: number, max: number, intervalType?: IntervalType);
    /**
     * Checks if the given value is contained in the interval or not.
     * @param val
     * Value to check if it is contained.
     */
    contains(val: number): boolean;
}
//# sourceMappingURL=Interval.d.ts.map