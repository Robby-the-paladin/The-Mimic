import { Vector } from './Vector';
import { Line } from './Line';
/**
 * Represents a single point with x, y coordinates.
 */
export declare class Point {
    x: number;
    y: number;
    constructor(x: number, y: number);
    static fromValues(x: number, y: number): Point;
    /**
     * Returns the vector going from the inputted point p, to this point.
     * @param p
     */
    minus(p: Point): Vector;
    /**
     * Defines a line by using this point and a vector.
     */
    asLine(v: Vector): Line;
    /**
     * Returns the coordinates of this point as a vector.
     */
    asVector(): Vector;
    /**
     * Returns the point reached when starting at this point and then moving according to vector.
     * @param v
     */
    plus(v: Vector): Point;
    /**
     * Returns the distance between this point and p2 squared
     * @param p2
     */
    distanceSquare(p2: Point): number;
    /**
     * Returns new point that is moved by x, y.
     * Same function as plus, but here taking number instead of vector.
     * @param x
     * @param y
     */
    translate(x: number, y: number): Point;
    /**
     * Rotates this point around a pivotPoint by a certain number of degrees.
     * @param pivotPoint
     * The point around which this point should rotate
     * @param degrees
     * The number of degrees that the point should rotate (a circle covers 360 degrees,
     * negative values are ok)
     */
    rotate(pivotPoint: Point, degrees: number): Point;
    /**
     * Returns true if this point and the other have the same coordinates within
     * GlobalConfig.precision error.
     * @param
     * The other point to compare with.
     */
    equals(other: Point): boolean;
    /**
     * Gives a readable string representing this point.
     */
    toString(): string;
}
/**
 * Creates a point.
 */
export declare function point(x: number, y: number): Point;
//# sourceMappingURL=Point.d.ts.map