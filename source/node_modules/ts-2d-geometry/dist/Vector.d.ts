import { Point } from './Point';
/**
 * Represents a 2 dimensional vector.
 */
export declare class Vector {
    x: number;
    y: number;
    w?: number | undefined;
    /**
     * Constructs a vector.
     *
     * @param w
     * This is the third component in the vector. This component is used when
     * for example performing transformations. Then a matrix multiplication might
     * result in the w component becoming not equal to 1. In this case one should
     * normalize the vector so that w becomes one again to have a valid vector.
     *
     * Why does this happen with matrix multiplications? Well most often it doesn't,
     * for example translate operations or rotations don't cause this. But if you use
     * Skew operations, this is might happen. I'd need to read up on it more myself
     * to have a better answer.
     */
    constructor(x: number, y: number, w?: number | undefined);
    static fromArray(a: number[]): Vector;
    static null: Vector;
    /**
     * Gives the dot product between the two vectors.
     * @param v2
     */
    dot(v2: Vector): number;
    /**
     * Returns this vector as an array of numbers as [x, y, w]
     */
    asArray(): number[];
    /**
     * Returns a point with the same x and y as this vector.
     */
    asPoint(): Point;
    /**
     * Return true if this vector is pointing in the same direction
     * as the other vector.
     */
    parallel(other: Vector): boolean;
    /**
     * Returns the scalar value of the cross product between this vector and v2.
     * Normally cross product is performed in three dimensions, but here we assume
     * z value equals 0, and returns then the size of the resulting z dimension.
     * @param v2
     */
    cross(v2: Vector): number;
    /**
     * Returns the perpendicular component vector of this vector compared to another vector.
     */
    perpendicularComponentTo(other: Vector): Vector;
    /**
     * Returns this vector projected onto the other vector.
     */
    projectOnto(other: Vector): Vector;
    /**
     * Returns this vector in string form.
     */
    toString(): String;
    /**
     * Returns the clockwise perpendicular vector to this one.
     * A perpendicular vector can be found by defining a vector where
     * the dot product equals 0. Now, there will be two perpendicular vectors,
     * one that is defined clockwise, and one that is found counter clockwise.
     */
    clockwisePerpendicular(): Vector;
    /**
     * Returns a vector pointing in the opposite direction of this vector.
     */
    reverse(): Vector;
    /**
     * Returns a vector that is normalized to have norm2 = 1, pointing in the same
     * direction as this vector.
     */
    normed(): Vector;
    /**
     * Returns a new vector that is this vector multiplied by the given scalar.
     * @param factor
     */
    scale(factor: number): Vector;
    /**
     * This vector dot producted with itself.
     */
    square(): number;
    /**
     * Returns whether this vector is the null vector (x and y components are null) or not.
     */
    isNullVector(): boolean;
    /**
     * The euclidean length of this vector.
     */
    norm2(): number;
    /**
     * Returns the vector that is this vector plus another one.
     */
    plus(other: Vector): Vector;
    /**
     * Returns this vector minus the other vector.
     */
    minus(other: Vector): Vector;
}
/**
  * Creates a vector
  */
export declare function vector(x: number, y: number): Vector;
//# sourceMappingURL=Vector.d.ts.map