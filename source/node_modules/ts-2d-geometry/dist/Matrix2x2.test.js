"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Matrix2x2_1 = require("./Matrix2x2");
var ts_optional_1 = require("@ruffy/ts-optional");
test('constructor should create Matrix', function () {
    var m = new Matrix2x2_1.Matrix2x2([[0, 1],
        [2, 0]]);
    expect(m.get(0, 0)).toBe(0);
    expect(m.get(0, 1)).toBe(1);
    expect(m.get(1, 0)).toBe(2);
    expect(m.get(1, 1)).toBe(0);
});
test('inverse should return none if inverse is not defined.', function () {
    var m = new Matrix2x2_1.Matrix2x2([[0, 0], [0, 0]]);
    expect(m.inverse()).toBe(ts_optional_1.none);
});
test('inverse should inverse a matrix.', function () {
    var m = new Matrix2x2_1.Matrix2x2([[1, 2], [3, 4]]);
    expect(m.inverse()).toEqual(ts_optional_1.some(new Matrix2x2_1.Matrix2x2([[-2, 1.5], [1, -0.5]])));
});
test('det should return determinant of matrix', function () {
    var m = Matrix2x2_1.Matrix2x2.fromArray([1, 0, 0, 1]);
    expect(m.det()).toEqual(1);
});
test('scale should multiply each element by factor', function () {
    var m = Matrix2x2_1.Matrix2x2.fromArray([1, 0, 0, 1]);
    expect(m.scale(0.5).get(0, 0)).toEqual(0.5);
});
test('times should multiply vector with matrix', function () {
    var m = Matrix2x2_1.Matrix2x2.fromArray([2, 0, 0, 1]);
    expect(m.times([2, 3])).toEqual([4, 3]);
});
//# sourceMappingURL=Matrix2x2.test.js.map