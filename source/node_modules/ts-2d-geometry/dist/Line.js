"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.line = exports.Line = void 0;
var Vector_1 = require("./Vector");
var Point_1 = require("./Point");
var Matrix2x2_1 = require("./Matrix2x2");
/**
 * A line is represented by a point and a vector, it is of infinite length.
 */
var Line = /** @class */ (function () {
    function Line(p, v) {
        this.p = p;
        this.v = v;
        if (v.isNullVector()) {
            throw new Error('Null vector is not allowed when defining line.');
        }
    }
    /**
     * Finds what point on this line is closest to the input point.
     * @param p2
     * Point that we want to find closest point for.
     */
    Line.prototype.project = function (p2) {
        var factor = this.projectFactor(p2);
        return this.p.plus(this.v.scale(factor));
    };
    /**
    * Finds the point where two lines intersect returns none if the lines are parallel.
     * @param l2
     * Other line we want to check intersection with.
     */
    Line.prototype.intersect = function (l2) {
        var _this = this;
        var matrix = Matrix2x2_1.Matrix2x2.fromArray([this.v.x, this.v.y, l2.v.x, l2.v.y]);
        var invOpt = matrix.inverse();
        return invOpt.map(function (inv) {
            var factor = inv.times(l2.p.minus(_this.p).asArray())[0];
            return _this.p.plus(_this.v.scale(factor));
        });
    };
    /**
     * Returns what number you would have to multiply the lines vector with to reach the
     * point returned by project when starting from the line's point.
     * @param p2
     * Point whose projection we get the factor for.
     */
    Line.prototype.projectFactor = function (p2) {
        var pp2 = p2.minus(this.p);
        return pp2.dot(this.v) / this.v.square();
    };
    /**
     * Gives the minimum distance squared from p2 to the line.
     * This function exists because it doesn't require any Math.sqrt, and is hence a more efficient
     * way if one want to compare distances between many points.
     * @param p2
     * Point to get minimum distance for.
     */
    Line.prototype.projectDistanceSquare = function (p2) {
        var proj = this.project(p2);
        return proj.minus(p2).square();
    };
    /**
     * Gives the minimum distance from p2 to the line.
     * @param p2
     * Point to get minimum distance for.
     */
    Line.prototype.projectDistance = function (p2) {
        return Math.sqrt(this.projectDistanceSquare(p2));
    };
    return Line;
}());
exports.Line = Line;
/**
 * Creates a line using the first two values as an initial point, and the last two values as
 * the direction vector.
 */
function line(x, y, vx, vy) {
    return new Line(Point_1.point(x, y), Vector_1.vector(vx, vy));
}
exports.line = line;
//# sourceMappingURL=Line.js.map