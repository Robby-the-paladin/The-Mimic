"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Interval = exports.IntervalType = void 0;
/**
 * Enum that defines how to interpret the interval of a line segment.
 * It can either be Closed, meaning that endpoints are included [p1, p2]
 * OpenStart meaning half open, start is excluded (p1, p2]
 * OpenEnd meaning half open, end is excluded [p1, p2)
 * or Open meaning that start and end are excluded (p1, p2).
 */
var IntervalType;
(function (IntervalType) {
    IntervalType[IntervalType["Closed"] = 1] = "Closed";
    IntervalType[IntervalType["OpenStart"] = 2] = "OpenStart";
    IntervalType[IntervalType["OpenEnd"] = 4] = "OpenEnd";
    IntervalType[IntervalType["Open"] = 6] = "Open";
})(IntervalType = exports.IntervalType || (exports.IntervalType = {}));
/**
 * Represents the interval between two number,
 * The interval can be either open, closed, or half closed, ie.
 * either including or excluding the endpoint values
 */
var Interval = /** @class */ (function () {
    /**
     * Creates a new interval.
     * @param min
     * The minimum endpoint of the interval
     * @param max
     * The maximum endpoint of the interval.
     * @param includeMin
     * If the min value is included in the interval.
     * @param includeMax
     * If the max value is included in the interval.
     */
    function Interval(min, max, intervalType) {
        if (intervalType === void 0) { intervalType = IntervalType.Closed; }
        this.min = min;
        this.max = max;
        this.intervalType = intervalType;
        if (min === max) {
            this.includeMin = intervalType !== IntervalType.Open;
            this.includeMax = intervalType !== IntervalType.Open;
        }
        else {
            this.includeMin = (intervalType & IntervalType.OpenStart) === 0;
            this.includeMax = (intervalType & IntervalType.OpenEnd) === 0;
        }
    }
    /**
     * Checks if the given value is contained in the interval or not.
     * @param val
     * Value to check if it is contained.
     */
    Interval.prototype.contains = function (val) {
        return (this.includeMin ? this.min <= val : this.min < val)
            && (this.includeMax ? this.max >= val : this.max > val);
    };
    return Interval;
}());
exports.Interval = Interval;
//# sourceMappingURL=Interval.js.map