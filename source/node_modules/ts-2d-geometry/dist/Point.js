"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.point = exports.Point = void 0;
var Vector_1 = require("./Vector");
var Line_1 = require("./Line");
var GlobalConfig_1 = __importDefault(require("./GlobalConfig"));
var Matrix2x2_1 = require("./Matrix2x2");
/**
 * Represents a single point with x, y coordinates.
 */
var Point = /** @class */ (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    Point.fromValues = function (x, y) {
        return point(x, y);
    };
    /**
     * Returns the vector going from the inputted point p, to this point.
     * @param p
     */
    Point.prototype.minus = function (p) {
        return new Vector_1.Vector(this.x - p.x, this.y - p.y);
    };
    /**
     * Defines a line by using this point and a vector.
     */
    Point.prototype.asLine = function (v) {
        return new Line_1.Line(this, v);
    };
    /**
     * Returns the coordinates of this point as a vector.
     */
    Point.prototype.asVector = function () {
        return new Vector_1.Vector(this.x, this.y);
    };
    /**
     * Returns the point reached when starting at this point and then moving according to vector.
     * @param v
     */
    Point.prototype.plus = function (v) {
        return new Point(this.x + v.x, this.y + v.y);
    };
    /**
     * Returns the distance between this point and p2 squared
     * @param p2
     */
    Point.prototype.distanceSquare = function (p2) {
        return p2.minus(this).square();
    };
    /**
     * Returns new point that is moved by x, y.
     * Same function as plus, but here taking number instead of vector.
     * @param x
     * @param y
     */
    Point.prototype.translate = function (x, y) {
        return new Point(this.x + x, this.y + y);
    };
    /**
     * Rotates this point around a pivotPoint by a certain number of degrees.
     * @param pivotPoint
     * The point around which this point should rotate
     * @param degrees
     * The number of degrees that the point should rotate (a circle covers 360 degrees,
     * negative values are ok)
     */
    Point.prototype.rotate = function (pivotPoint, degrees) {
        var rotationMatrix = Matrix2x2_1.Matrix2x2.rotationDegrees(degrees);
        var rotated = rotationMatrix.times([this.x, this.y]);
        return new Point(rotated[0], rotated[1]);
    };
    /**
     * Returns true if this point and the other have the same coordinates within
     * GlobalConfig.precision error.
     * @param
     * The other point to compare with.
     */
    Point.prototype.equals = function (other) {
        return Math.abs(this.x - other.x) < GlobalConfig_1.default.precision
            && Math.abs(this.y - other.y) < GlobalConfig_1.default.precision;
    };
    /**
     * Gives a readable string representing this point.
     */
    Point.prototype.toString = function () {
        return "[" + this.x + ", " + this.y + "]";
    };
    return Point;
}());
exports.Point = Point;
/**
 * Creates a point.
 */
function point(x, y) {
    return new Point(x, y);
}
exports.point = point;
//# sourceMappingURL=Point.js.map