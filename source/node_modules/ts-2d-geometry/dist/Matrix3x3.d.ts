import { Optional } from '@ruffy/ts-optional';
/**
 * Represents a 3x3 matrix.
 */
export declare class Matrix3x3 {
    private elements;
    constructor(elements: number[][]);
    /**
     * Returns a rotation matrix with the given degrees. that rotates
     * a vector clockwise.
     */
    static rotationDegrees(degrees: number): Matrix3x3;
    /**
     * Returns a transform matrix that moves a point
     * by x, y.
     */
    static translation(x: number, y: number): Matrix3x3;
    /**
     * Returns an identity matrix 3x3.
     */
    static identity(): Matrix3x3;
    /**
     * Returns a 3x3 Matrix from an array. The element
     * in the array are given in the following places:
     * [(0,0), (1,0), (2,0), (0,1), (1,1), (2,1),
     * (0,2), (1,2), (2,2)]
     */
    static fromArray(a: number[]): Matrix3x3;
    /**
     * Returns the element in the given position.
     * @param y
     * The y of the element.
     * @param x
     * The x of the element
     */
    get(y: number, x: number): number;
    /**
     * Multiplies this matrix with another matrix.
     */
    timesMatrix(m: Matrix3x3): Matrix3x3;
    /**
     * Multiplies this matrix with an array of numbers.
     * @param vArray
     */
    times(vArray: number[]): number[];
    /**
     * Returns a string representation of this matrix.
     */
    toString(): string;
    /**
     * Returns an inversed version of this matrix.
     */
    inverse(): Optional<Matrix3x3>;
    /**
     * Returns a version of this matrix where all elements are multiplied
     * by the given scalar.
     */
    scale(scalar: number): Matrix3x3;
    /**
     * Returns the transpose of this matrix.
     */
    transpose(): Matrix3x3;
    /**
     * Finds the adjugate matrix for this matrix.
     */
    adjugate(): Matrix3x3;
    /**
     * Gets the sub matrix excluding a given position. This is used to
     * calculate the adjugate for example. This method always makes the top left
     * element of the new matrix to be the element at the bottom right of the
     * excluded position. If the excluded position is the bottom right of the matrix,
     * the selection wraps and hence chooses the top left of the main matrix
     * to be the top left position of the sub matrix.
     */
    private subMatrixExcludingPosition;
    /**
     * Returns a value in the interval [0, 2]. By adding or subtracting
     * 3 to the input value.
     */
    private bound;
    /**
     * Calculates the determinant of the matrix.
     */
    det(): number;
}
//# sourceMappingURL=Matrix3x3.d.ts.map